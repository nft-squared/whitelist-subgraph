type Account @entity {
    "user information"
    id: ID!
    address: String!
    referenceCode: String!
    isSpecialRefer: bool!
    
    auths: [Auth!] @derivedFrom(field: "account")
    winners: [RoundWinner!] @derivedFrom(field: "winner")
}

type Auth @entity {
    "user authorized tokens"
    id: ID!
    account: Account!
    txHash: String!
    tokenAddr: String!
    tokenID: Int!
}

type Bucket @entity {
    "bucket"
    id: ID!
    state: BucketState!
    address: String!
    txHash: String!
    creator: Account!

    uri: String!
    name: String!
    description: String!
    discord: String!
    twitter: String!
    website: String!
    whitelistPerRound: Int!
    numRounds: Int!
    mintPrice: Int!
    mintToken: String!
    chain: String!
    launchDate: Date!
    referral: String

    createTime: Int!
    rounds: [BucketRound!] @derivedFrom(field: "bucket")
}

type BucketRound @entity {
    "bucket rounds"
    id: ID!
    state: RoundState
    bucket: Bucket!
    round: Int!
    tickets: Int!

    raffleTime: Date
    txHash: String
    result: [RoundWinner!] @derivedFrom(field: "round")
}

type RoundWinner @entity {
    "raffle result"
    id: ID!
    round: BucketRound!

    winner: User!
    numberWhitelist: Int!
}

enum BucketState {
    "pending"
    "active"
    "closed"
}

enum RoundState {
    "pending"
    "done"
}

type Epoch @entity {
    "weight for blue chip NFTs"
    id: ID!
    epoch: Int!
    weights: [tokenWeights!]! @derivedFrom(field: "epoch")

    currentTimestamp: Date
    nextEpoch: Int
    nextTimestamp: Date
}

type tokenWeight @entity {
    "token weight for each epoch"
    id: ID!
    epoch: Epoch
    tokenAddress: String!
    weight: Int!
}
