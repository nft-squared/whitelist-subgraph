"https://thegraph.com/docs/en/developer/create-subgraph-hosted/"
type User @entity {
    "user address"
    id: ID!
    referenceCode: String
    authedTokens: [AuthedToken!]
    whitelisted: [RoundWinner!] @derivedFrom(field: "winner")
    userJoinedRoundList: [UserRoundTicket!]
}

type AuthedToken @entity {
    "tokenAddr + tokenID"
    id: ID!
    user: User!
    txHash: String!
    tokenAddr: String!
    tokenID: Int!
}

type Bucket @entity {
    "bucket address"
    id: ID!
    state: BucketState!
    txHash: Bytes!
    creator: User!
    uri: String!
    name: String!
    description: String!
    discord: String!
    twitter: String!
    website: String!
    whitelistPerRound: Int!
    numRounds: Int!
    mintPrice: Int!
    mintToken: String!
    blockchain: String!
    launchDate: Int!
    referral: String

    createTime: Int!
    rounds: [BucketRound!] @derivedFrom(field: "bucket")
}

type UserRoundTicket @entity {
    "user.id + bucketRound.id"
    id: ID!
    bucketRound: BucketRound!
    "total number of tickets put into this round"
    amount: Int!
    user: User!
}

type BucketRound @entity {
    "bucket.id + round"
    id: ID!
    rnd: BigInt
    state: RoundState!
    bucket: Bucket!
    round: Int!
    "total number of tickets put into this round"
    tickets: Int!
    "time to trigger the raffle"
    raffleTime: Int
    raffleTxHash: Int
    userRoundTickets: [UserRoundTicket!] @derivedFrom(field: "bucketRound")
    winners: [RoundWinner!] @derivedFrom(field: "round")
}

type RoundWinner @entity {
    "bucketRound.id + user.id + `winner`"
    id: ID!
    round: BucketRound!
    winner: User!
    numberWhitelist: Int!
}

enum BucketState {
    pending
    active
    closed
}

enum RoundState {
    pending
    done
}

type Epoch @entity {
    "epoch id"
    id: ID!
    state: EpochState!
    weights: [TokenWeight!]! @derivedFrom(field: "epoch")

    startTimestamp: Int!
    nextEpoch: Int!
    nextTimestamp: Int!
}

type TokenWeight @entity {
    "epoch.id + tokenAddress"
    id: ID!
    epoch: Epoch
    tokenAddress: String!
    weight: Int!
}

enum EpochState {
    inactive
    active
    transitioning
    expired
}

type System @entity {
    "system id"
    id: ID!
    bonusBaseMulti: Int!
    bonusReferMulti: Int!
    bonusVIPMulti: Int!
    bonusReferalMulti: Int!
    bonusDenom: Int!

    bucketPrice: BigDecimal!
}
