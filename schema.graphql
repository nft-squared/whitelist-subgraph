"https://thegraph.com/docs/en/developer/create-subgraph-hosted/"
type User @entity {
    "user address"
    id: ID!
    referenceCode: String
    authedTokens: [AuthedTokenId!]! @derivedFrom(field: "user")
    whitelisted: [BucketWinner!]! @derivedFrom(field: "user")
    userJoinedBucketList: [UserBucketTicket!]! @derivedFrom(field: "user")
}

type AuthedToken @entity {
    "token address"
    id: ID!
    weight: Int!
    tokens: [AuthedTokenId!]! @derivedFrom(field: "token")
    weights: [TokenWeight!]! @derivedFrom(field: "token")
}

type AuthedTokenId @entity {
    "tokenAddr + tokenID"
    id: ID!
    user: User
    txHash: String!
    token: AuthedToken!
    tokenID: Int!
}

type SearchTicket @entity {
    "Bucket.id + index"
    id: ID!
    bucket: Bucket!
    user: Bytes!
    accumulateTicktes: Int!
}

type BucketWinner @entity {
    "bucket.id + user.id"
    id: ID!
    user: User!
    bucket: Bucket!
    indexes: [Int]!
}

type Bucket @entity {
    "bucket address"
    id: ID!
    state: String
    txHash: Bytes
    creator: String
    uri: String
    name: String
    description: String
    discord: String
    twitter: String
    website: String
    whitelistAmount: Int
    mintPrice: Int
    mintToken: String
    blockchain: String
    launchDate: Int
    referral: String
    createTime: Int
    raffleTime: Int
    startEpoch: Int
    endEpoch: Int
    rnd: BigInt

    ticketsAmountInBucket: Int
    winners: [BucketWinner!] @derivedFrom(field: "bucket")

    userTickets: [UserBucketTicket!]! @derivedFrom(field: "bucket")
    searchLength: Int!
    searchTickets: [SearchTicket!]! @derivedFrom(field: "bucket")
}

type UserBucketTicket @entity {
    "user.id + bucket.id"
    id: ID!
    bucket: Bucket!
    "total number of tickets put into this round"
    amount: Int!
    user: User!
}

type Epoch @entity {
    "epoch id, 0 when ElitePad is deployed"
    id: ID!
    state: EpochState

    startTimestamp: Int
    nextEpoch: Int
    nextTimestamp: Int
}

type TokenWeight @entity {
    "epochId + tokenAddress"
    id: ID!
    epoch: Int
    token: AuthedToken!
    weight: Int!
}

enum BucketState {
    pending
    active
    closed
}


enum EpochState {
    inactive
    active
    transitioning
    expired
}

type System @entity {
    "system id"
    id: ID!
    bonusBaseMulti: Int!
    bonusReferMulti: Int!
    bonusVIPMulti: Int!
    bonusReferalMulti: Int!
    bonusDenom: Int!

    bucketPrice: BigDecimal!
}
